pipeline {
    agent none
    
    environment {
        // Define currency conversion environment variables
        SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME = 'spring-boot-microservice-currency-conversion-service'      // Spring Boot app name
        SPRING_BOOT_CURRENCY_CONVERSION_PORT = 8100                          // Spring Boot application port
        DOCKER_CURRENCY_CONVERSION_IMAGE_NAME = 'spring-boot-microservice-currency-conversion-service'   // Docker image name
        DOCKER_CURRENCY_CONVERSION_REGISTRY = 'vimalesh198'            // Docker registry username
        DOCKER_CURRENCY_CONVERSION_REPO = 'spring-boot-microservice-currency-conversion-service'          // Docker repository name
        

        // Define eureka naming server environment variables
        SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME = 'spring-boot-microservice-eureka-naming-server'      // Spring Boot app name
        SPRING_BOOT_EUREKA_NAME_SERVER_PORT = 8761                          // Spring Boot application port
        DOCKER_EUREKA_NAME_SERVER_IMAGE_NAME = 'spring-boot-microservice-eureka-naming-server'   // Docker image name
        DOCKER_EUREKA_NAME_SERVER_REGISTRY = 'vimalesh198'            // Docker registry username
        DOCKER_EUREKA_NAME_SERVER_REPO = 'spring-boot-microservice-eureka-naming-server'          // Docker repository name
        

        // Define forex service environment variables
        SPRING_BOOT_APP_FOREX_SERVICE_NAME = 'spring-boot-microservice-forex-service'      // Spring Boot app name
        SPRING_BOOT_FOREX_SERVICE_PORT = 8000                          // Spring Boot application port
        DOCKER_FOREX_SERVICE_IMAGE_NAME = 'spring-boot-microservice-forex-service'   // Docker image name
        DOCKER_FOREX_SERVICE_REGISTRY = 'vimalesh198'            // Docker registry username
        DOCKER_FOREX_SERVICE_REPO = 'spring-boot-microservice-forex-service'          // Docker repository name
        
    }

    stages {
        stage('maven version'){
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                sh(script: 'mvn --version')
            }
            post{
                always{
                    echo(message: 'maven version stage ')
                }
            }
        }

        stage("Parallel validation spring-boot-basic-microservice"){
            parallel {
                stage("validation spring-boot-microservice-currency-conversion-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME}") {
                            sh(script: 'mvn clean validate')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven validations stage ')
                        }
                        success{
                            echo(message: 'maven validations successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven validations unsuccessfull')
                        }
                    }
                }
                stage("validation spring-boot-microservice-eureka-naming-server"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME}") {
                            sh(script: 'mvn clean validate')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven validations stage ')
                        }
                        success{
                            echo(message: 'maven validations successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven validations unsuccessfull')
                        }
                    }
                }
                stage("validation spring-boot-microservice-forex-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_FOREX_SERVICE_NAME}") {
                            sh(script: 'mvn clean validate')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven validations stage ')
                        }
                        success{
                            echo(message: 'maven validations successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven validations unsuccessfull')
                        }
                    }
                }
            }
        }
        

        stage('Parallel Tests spring-boot-basic-microservice'){
            parallel {
                stage("Tests spring-boot-microservice-currency-conversion-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME}") {
                            sh(script: 'mvn test')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven test stage ')
                        }
                        success{
                            echo(message: 'maven test successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven test unsuccessfull')
                        }
                    }
                }
                stage("Tests spring-boot-microservice-eureka-naming-server"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME}") {
                            sh(script: 'mvn test')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven test stage ')
                        }
                        success{
                            echo(message: 'maven test successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven test unsuccessfull')
                        }
                    }
                }
                stage("Tests spring-boot-microservice-forex-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_FOREX_SERVICE_NAME}") {
                            sh(script: 'mvn test')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven test stage ')
                        }
                        success{
                            echo(message: 'maven test successfull')
                        }
                        unsuccessful{
                            echo(message: 'maven test unsuccessfull')
                        }
                    }
                }
            }
        }

        stage('Parallel Build spring-boot-basic-microservice'){
            parallel {
                stage("Build spring-boot-microservice-currency-conversion-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME}") {
                            sh(script: 'mvn -B -DskipTests clean package')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven build stage ')
                        }
                        success{
                            echo(message: 'maven build successfull')
                            archiveArtifacts artifacts: "**/${SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME}/target/*.jar"
                        }
                        unsuccessful{
                            echo(message: 'maven build unsuccessfull')
                        }
                    }
                }
                stage("builds spring-boot-microservice-eureka-naming-server"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME}") {
                            sh(script: 'mvn -B -DskipTests clean package')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven build stage ')
                        }
                        success{
                            echo(message: 'maven build successfull')
                            archiveArtifacts artifacts:  "**/${SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME}/target/*.jar"
                        }
                        unsuccessful{
                            echo(message: 'maven build unsuccessfull')
                        }
                    }
                }
                stage("builds spring-boot-microservice-forex-service"){
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17-alpine'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps{
                        dir("spring-boot-basic-microservice/${SPRING_BOOT_APP_FOREX_SERVICE_NAME}") {
                            sh(script: 'mvn -B -DskipTests clean package')
                        }
                    }
                    post{
                        always{
                            echo(message: 'maven build stage ')
                        }
                        success{
                            echo(message: 'maven build successfull')
                            archiveArtifacts artifacts: "**/${SPRING_BOOT_APP_FOREX_SERVICE_NAME}/target/*.jar"
                        }
                        unsuccessful{
                            echo(message: 'maven build unsuccessfull')
                        }
                    }
                }
            }
        }
           
        stage('Parallel Docker Build spring-boot-basic-microservice'){
            parallel {
                stage("Docker Build spring-boot-microservice-currency-conversion-service"){
                    agent any
                    steps{
                        script {
                            // Build Docker image for the Spring Boot app
                            sh '''#!/bin/bash
                            pwd
                            cd spring-boot-basic-microservice
                            docker build --build-arg SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME=${SPRING_BOOT_APP_CURRENCY_CONVERSION_NAME} --build-arg SPRING_BOOT_CURRENCY_CONVERSION_PORT=${SPRING_BOOT_CURRENCY_CONVERSION_PORT} -t ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT} .
                            '''
                        }
                    }
                    post{
                        always{
                            echo(message: 'Docker Build spring-boot-microservice-currency-conversion-service running')
                        }
                        success{
                            echo(message: 'Docker Build spring-boot-microservice-currency-conversion-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Docker Build spring-boot-microservice-currency-conversion-service unsuccessfull')
                        }
                    }
                }
                stage("Docker Build spring-boot-microservice-eureka-naming-server"){
                    agent any
                    steps{
                        script {
                            // Build Docker image for the Spring Boot app
                            sh '''#!/bin/bash
                            pwd                            
                            cd spring-boot-basic-microservice
                            docker build --build-arg SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME=${SPRING_BOOT_APP_EUREKA_NAME_SERVER_NAME} --build-arg SPRING_BOOT_EUREKA_NAME_SERVER_PORT=${SPRING_BOOT_EUREKA_NAME_SERVER_PORT} -t ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT} .
                            '''
                        }
                    }
                    post{
                        always{
                            echo(message: 'Docker Build spring-boot-microservice-eureka-naming-server running')
                        }
                        success{
                            echo(message: 'Docker Build spring-boot-microservice-eureka-naming-server successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Docker Build spring-boot-microservice-eureka-naming-server unsuccessfull')
                        }
                    }
                }
                stage("Docker builds spring-boot-microservice-forex-service"){
                    agent any
                    steps{
                        script {
                            // Build Docker image for the Spring Boot app
                            sh '''#!/bin/bash
                            pwd
                            cd spring-boot-basic-microservice
                            docker build --build-arg SPRING_BOOT_APP_FOREX_SERVICE_NAME=${SPRING_BOOT_APP_FOREX_SERVICE_NAME} --build-arg SPRING_BOOT_FOREX_SERVICE_PORT=${SPRING_BOOT_FOREX_SERVICE_PORT} -t ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT} .
                            '''
                        }
                    }
                    post{
                        always{
                            echo(message: 'Docker Build spring-boot-microservice-forex-service running')
                        }
                        success{
                            echo(message: 'Docker Build spring-boot-microservice-forex-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Docker Build spring-boot-microservice-forex-service unsuccessfull')
                        }
                    }
                }
            }
        }
        
        stage('Parallel Push Docker Image spring-boot-basic-microservice'){
            parallel {
                stage("Push Docker Image spring-boot-microservice-currency-conversion-service"){
                    agent any
                    steps {
                        script {
                            def userInput = input message: 'Do you want to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Push to spring-boot-microservice-currency-conversion-service Docker Hub?', name: 'Push')
                            ]
                            // Log in to Docker Hub and push the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker push ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT}
                                '''
                            }
                    
                            
                        }
                    }
                    post{
                        always{
                            script {
                                // Cleanup: remove the Docker image after successful build
                                echo "Cleaning up Docker image..."
                                sh '''#!/bin/bash
                                echo "Removing image: ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT}"
                                docker rmi ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT} || true
                                '''
                            }
                        }
                        success{
                            echo(message: 'Push Docker Image spring-boot-microservice-currency-conversion-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Push Docker Image spring-boot-microservice-currency-conversion-service unsuccessfull')
                        }
                    }
                }
                stage("Push Docker Image spring-boot-microservice-eureka-naming-server"){
                    agent any
                    steps{
                        script {
                            def userInput = input message: 'Do you want to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Push to spring-boot-microservice-eureka-naming-server Docker Hub?', name: 'Push')
                            ]
                            // Log in to Docker Hub and push the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker push ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT}
                                '''
                            }
                    
                            
                        }
                    }
                    post{
                        always{
                            script {
                                // Cleanup: remove the Docker image after successful build
                                echo "Cleaning up Docker image..."
                                sh '''#!/bin/bash
                                echo "Removing image: ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT}"
                                docker rmi ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT} || true
                                '''
                            }
                        }
                        success{
                            echo(message: 'Push Docker Image spring-boot-microservice-eureka-naming-server successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Push Docker Image spring-boot-microservice-eureka-naming-server unsuccessfull')
                        }
                    }
                }
                stage("Push Docker Images spring-boot-microservice-forex-service"){
                    agent any
                    steps{
                        script {
                            def userInput = input message: 'Do you want to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Push to spring-boot-microservice-forex-service Docker Hub?', name: 'Push')
                            ]
                            // Log in to Docker Hub and push the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker push ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT}
                                '''
                            }
                    
                            
                        }
                    }
                    post{
                        always{
                            script {
                                // Cleanup: remove the Docker image after successful build
                                echo "Cleaning up Docker image..."
                                sh '''#!/bin/bash
                                echo "Removing image: ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT}"
                                docker rmi ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT} || true
                                '''
                            }
                        }
                        success{
                            echo(message: 'Push Docker Image spring-boot-microservice-forex-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: 'Push Docker Image spring-boot-microservice-forex-service unsuccessfull')
                        }
                    }
                }
            }
        }

        stage('Parallel Deploy to Staging spring-boot-basic-microservice'){
            parallel {
                stage(" Deploy to Staging spring-boot-microservice-currency-conversion-service"){
                    agent any
                    steps {
                        script {
                            def userInput = input message: 'Do you want spring-boot-microservice-currency-conversion-service to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Deploy to spring-boot-microservice-currency-conversion-service environment?', name: 'Deploy')
                            ]

                            // Log in to Docker Hub and pull the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker pull ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT}
                                docker run -p ${SPRING_BOOT_CURRENCY_CONVERSION_PORT}:${SPRING_BOOT_CURRENCY_CONVERSION_PORT} -d ${DOCKER_CURRENCY_CONVERSION_REGISTRY}/${DOCKER_CURRENCY_CONVERSION_REPO}:${GIT_COMMIT}
                                '''
                            }
                        }
                    }
                    post{
                        success{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-currency-conversion-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-currency-conversion-service unsuccessfull')
                        }
                    }
                }
                stage("Deploy to Staging spring-boot-microservice-eureka-naming-server"){
                    agent any
                    steps {
                        script {
                            def userInput = input message: 'Do you want spring-boot-microservice-eureka-naming-server to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Deploy to spring-boot-microservice-eureka-naming-server environment?', name: 'Deploy')
                            ]

                            // Log in to Docker Hub and pull the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker pull ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT}
                                docker run -p ${SPRING_BOOT_EUREKA_NAME_SERVER_PORT}:${SPRING_BOOT_EUREKA_NAME_SERVER_PORT} -d ${DOCKER_EUREKA_NAME_SERVER_REGISTRY}/${DOCKER_EUREKA_NAME_SERVER_REPO}:${GIT_COMMIT}
                                '''
                            }
                        }
                    }
                    post{
                        success{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-eureka-naming-server successfull')                        
                        }
                        unsuccessful{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-eureka-naming-server unsuccessfull')
                        }
                    }
                }
                stage("Deploy to Staging spring-boot-microservice-forex-service"){
                    agent any
                    steps {
                        script {
                            def userInput = input message: 'Do you want spring-boot-microservice-forex-service to proceed?', parameters: [
                                booleanParam(defaultValue: false, description: 'Deploy to spring-boot-microservice-forex-service environment?', name: 'Deploy')
                            ]

                            // Log in to Docker Hub and pull the image using the stored credentials
                            withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh '''#!/bin/bash
                                docker --version
                                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                                docker pull ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT}
                                docker run -p ${SPRING_BOOT_FOREX_SERVICE_PORT}:${SPRING_BOOT_FOREX_SERVICE_PORT} -d ${DOCKER_FOREX_SERVICE_REGISTRY}/${DOCKER_FOREX_SERVICE_REPO}:${GIT_COMMIT}
                                '''
                            }
                        }
                    }
                    post{
                        success{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-forex-service successfull')                        
                        }
                        unsuccessful{
                            echo(message: ' Deploy to Staging  spring-boot-microservice-forex-service unsuccessfull')
                        }
                    }
                }
            }
        }

    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
        always {
            echo 'Be Happy!!'
        }
    }
}
