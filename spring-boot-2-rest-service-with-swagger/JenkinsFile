pipeline {
    agent any  // This will use any available agent for the entire pipeline.
    
    environment {
        // Define environment variables
        SPRING_BOOT_APP_NAME = 'spring-boot-2-rest-service-with-swagger'      // Spring Boot app name
        SPRING_BOOT_PORT = 9090                          // Spring Boot application port
        DOCKER_IMAGE_NAME = 'spring-boot-2-rest-service-with-swagger'   // Docker image name
        DOCKER_REGISTRY = 'vimalesh198'            // Docker registry username
        DOCKER_REPO = 'spring-boot-2-rest-service-with-swagger'          // Docker repository name
        // MAVEN_HOME = tool name: 'M3', type: 'Tool'       // Use Maven tool configured in Jenkins
    }

    stages {
        // stage('Checkout') {
        //     steps {
        //         // Clone the Git repository
        //         git 'https://github.com/vimaleshn98/spring-boot-examples.git'
        //     }
        // }
        stage('maven version'){
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                sh(script: 'mvn --version')
            }
            post{
                always{
                    echo(message: 'maven version stage ')
                }
            }
        }
        
        stage('validation'){
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                dir('spring-boot-2-rest-service-with-swagger') {
                    sh(script: 'mvn clean validate')
                }
            }
            post{
                always{
                    echo(message: 'maven validations stage ')
                }
                success{
                    echo(message: 'maven validations successfull')
                }
                unsuccessful{
                    echo(message: 'maven validations unsuccessfull')
                }
            }
        }

        stage('Test'){
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                dir('spring-boot-2-rest-service-with-swagger') {
                    sh 'mvn test'
                }
            }
            post{
                always{
                    echo(message: 'maven Test stage ')
                }
                success{
                    echo(message: 'maven test successfull')
                }
                unsuccessful{
                    echo(message: 'maven test unsuccessfull')
                }
            }
        }
        stage('Build'){
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }                               
            steps{
                dir('spring-boot-2-rest-service-with-swagger') {
                    sh 'mvn -B -DskipTests clean package'
                }
            }
            post{
                always{
                    echo(message: 'maven Build stage ')
                }
                success{
                    echo(message: 'maven Build successfull')
                    archiveArtifacts artifacts: '**/target/*.jar'
                }
                unsuccessful{
                    echo(message: 'maven Build unsuccessfull')
                }
            }
        }   

        

        stage('Build Docker Image') {
            steps {                
                script {
                    // Build Docker image for the Spring Boot app
                    sh '''#!/bin/bash
                    cd spring-boot-2-rest-service-with-swagger
                    docker build -t ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT} .
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                     def userInput = input message: 'Do you want to proceed?', parameters: [
                        booleanParam(defaultValue: false, description: 'Push to Docker Hub?', name: 'Push')
                    ]
                    // Log in to Docker Hub and push the image using the stored credentials
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''#!/bin/bash
                        docker --version
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT}
                        '''
                    }
            
                    
                }
            }
            post{
                success{
                     script {
                        // Cleanup: remove the Docker image after successful build
                        echo "Cleaning up Docker image..."
                        sh '''#!/bin/bash
                        echo "Removing image: ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT}"
                        docker rmi ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT} || true
                        '''
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            
            steps {
                script {
                    def userInput = input message: 'Do you want to proceed?', parameters: [
                        booleanParam(defaultValue: false, description: 'Deploy to environment?', name: 'Deploy')
                    ]

                    // Log in to Docker Hub and pull the image using the stored credentials
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''#!/bin/bash
                        docker --version
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker pull ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT}
                        docker run -p 9090:9090 -d ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT}
                        '''
                    }
                }
            }
        }
        // stage('clean up stuffs') {
        //     // agent any
        //     steps {
        //             script {
        //                 // Clean up Docker images to save space
        //                 sh '''#!/bin/bash
        //                 echo ${GIT_COMMIT}
        //                 docker rmi ${DOCKER_REGISTRY}/${DOCKER_REPO}:${GIT_COMMIT}
        //                 '''
        //             }
        //         }
        // }

    
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
        always {
            // Clean up workspace after each build
            // cleanWs()
            echo 'Be Happy!!'
        }
    }
}
